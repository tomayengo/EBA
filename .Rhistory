install.packages("readxl")
library(readxl)
install.packages("readxl")
library(readxl)
data<- read_excel("unilever.xlsx")
library(readxl)
install.packages("Rcpp")
data<- read_excel("unilever.xlsx")
data<- read_excel("unilever.xlsx")
print(data)
summary(data)
glimpse(data)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
glimpse(data)
install.packages("skimr")
library(skimr)
skim(data)
data<- read_excel("unilever.xlsx")
print(data)
summary(data)
glimpse(data)
skim(data)
print(data)
summary(data)
skim(data)
data<- read_excel("unilever.xlsx")
print(data)
summary(data)
skim(data)
skim(data)
summary(data)
skim(data)
missingvalues <- is.na(data)
print (missingvalues)
missingsummary <- colSums(missingvalues)
print(missingsummary)
data_fill <- data
data_fill[is.na(data_fill)] <-0
print(data_fill)
data <- data_fill
print (data)
findduplicate <- function(df) {duplicatecolumns <- duplicated(as.list(df)) return(duplicatecolumns)}
find_duplicate_columns <- function(df) {
duplicated_columns <- duplicated(as.list(df))
return(duplicated_columns)
}
findduplicate <- function(df) {
duplicatecolumns <- duplicated(as.list(df))
return(duplicatecolumns)
}
duplicatecolumns <-findduplicate(data)
print(duplicatecolumns)
data_unique <-data[, !duplicatecolumns]
print(data_unique)
data <- data_unique
print(data)
nonnum <- sapply(data, function(x) !is.numeric(x))
print(names(data)[nonnum])
cleandata <- data %>%
mutate(across(-1, ~ ifelse(is.numeric(.), ., 0)))
print(cleandata)
data_cleaned <- data %>%
mutate(across(-1, ~ as.numeric(as.character(.)), .names = "cleaned_{col}")) %>%
mutate(across(starts_with("cleaned_"), ~ replace_na(.x, 0))) %>%
select(-starts_with("cleaned_")) %>%
bind_cols(data %>% select(1))
print(data_cleaned)
data_cleaned <- data %>%
mutate(across(-1, ~ as.numeric(as.character(.)), .names = "cleaned_{col}")) %>%
mutate(across(starts_with("cleaned_"), ~ replace_na(.x, 0))) %>%
select(-starts_with("cleaned_")) %>%
bind_cols(data %>% select(1))
rlang::last_trace()
install.packages("replacer")
library(replacer)
data_cleaned <- data %>%
mutate(across(-1, ~ as.numeric(as.character(.)), .names = "cleaned_{col}")) %>%
mutate(across(starts_with("cleaned_"), ~ replace_na(.x, 0))) %>%
select(-starts_with("cleaned_")) %>%
bind_cols(data %>% select(1))
rlang::last_trace()
data_na <- data
data_na[non_numerical_cols] <- lapply(data_na[non_numerical_cols], function(x) {
suppressWarnings(as.numeric(as.character(x)))
})
data_na <-data
data_na[nonnum] <-lapply(data_na[nonnum], function(x) {
suppressWarnings(as.numeric(as.character(x)))
})
print("Data Frame with Non-Numerical Values Replaced with NA:")
print(data_na)
replace_non_numeric_with_zero <- function(column) {
column[!sapply(column, is.numeric)] <- 0
return(as.numeric(column))
}
# Apply the function to all columns except the first
data[, -1] <- lapply(data[, -1], replace_non_numeric_with_zero)
# Print the modified dataset
print("Data Frame after Replacing Non-Numerical Values with Zero (excluding the first column):")
print(data)
data <- data_unique
nonnum <- sapply(data, function(x) !is.numeric(x))
print(names(data)[nonnum])
data <- data_unique
print(data)
data<- read_excel("unilever.xlsx")
print(data)
missingvalues <- is.na(data)
print (missingvalues)
missingsummary <- colSums(missingvalues)
print(missingsummary)
data_fill <- data
data_fill[is.na(data_fill)] <-0
print(data_fill)
data <- data_fill
print (data)
findduplicate <- function(df) {
duplicatecolumns <- duplicated(as.list(df))
return(duplicatecolumns)
}
duplicatecolumns <-findduplicate(data)
print(duplicatecolumns)
#removing Duplicate columns
data_unique <-data[, !duplicatecolumns]
#updating dataset after removing duplicate column
data <- data_unique
print(data)
data_cleaned <- data %>%
mutate(across(-1, ~ ifelse(is.na(as.numeric(as.character(.))), 0, as.numeric(as.character(.)))))
print(data_cleaned)
data_cleaned <- data %>%
mutate(across(-1, ~ ifelse(is.na(as.numeric(as.character(.))), 0, as.numeric(as.character(.)))))
data <-data_cleaned
print(data)
data_cleaned <- data %>%
mutate(across(-1, ~ ifelse(is.na(as.numeric(as.character(.))), 0,
as.numeric(as.character(.)))))
data <-data_cleaned
print(data)
non_numerical_cols <- sapply(data, function(x) !is.numeric(x))
print("Columns with Non-Numerical Values:")
print(names(data)[non_numerical_cols])
#Replacing all non-numeral to zero
data_cleaned <- data %>%
mutate(across(-1, ~ ifelse(is.na(as.numeric(as.character(.))), 0,
as.numeric(as.character(.)))))
data <-data_cleaned
print(data)
non_numerical_cols <- sapply(data, function(x) !is.numeric(x))
print("Columns with Non-Numerical Values:")
print(names(data)[non_numerical_cols])
data <- data_unique
print(data)
non_numerical_cols <- sapply(data, function(x) !is.numeric(x))
print("Columns with Non-Numerical Values:")
print(names(data)[non_numerical_cols])
data_cleaned <- data %>%
mutate(across(-1, ~ ifelse(is.na(as.numeric(as.character(.))), 0,
as.numeric(as.character(.)))))
data <-data_cleaned
print(data)
data[numerical_cols] <- lapply(data[numerical_cols], function(x) {
round(x, 2)
})
numerical_cols <- sapply(data, is.numeric)
data[numerical_cols] <- lapply(data[numerical_cols], function(x) {
round(x, 2)
})
print(data)
data[numerical_cols] <- lapply(data[numerical_cols], function(x) {
round(x, 0)
})
print(data)
# Loading the excel file
data<- read_excel("unilever.xlsx")
print(data)
#Replacing missing values with 0
data_fill <- data
data_fill[is.na(data_fill)] <-0
print(data_fill)
#Updating the dataset
data <- data_fill
print (data)
#Identifying and removing Duplicate Values
findduplicate <- function(df) {
duplicatecolumns <- duplicated(as.list(df))
return(duplicatecolumns)
}
duplicatecolumns <-findduplicate(data)
print(duplicatecolumns)
#removing Duplicate columns
data_unique <-data[, !duplicatecolumns]
#updating dataset after removing duplicate column
data <- data_unique
print(data)
# Identify columns with non-numerical values
non_numerical_cols <- sapply(data, function(x) !is.numeric(x))
print(names(data)[non_numerical_cols])
#Replacing all non-numeral to zero
data_cleaned <- data %>%
mutate(across(-1, ~ ifelse(is.na(as.numeric(as.character(.))), 0,
as.numeric(as.character(.)))))
data <-data_cleaned
print(data)
# Loading the excel file
data<- read_excel("unilever.xlsx")
#Replacing missing values with 0
data_fill <- data
data_fill[is.na(data_fill)] <-0
print(data_fill)
#Updating the dataset
data <- data_fill
print (data)
#Identifying and removing Duplicate Values
findduplicate <- function(df) {
duplicatecolumns <- duplicated(as.list(df))
return(duplicatecolumns)
}
duplicatecolumns <-findduplicate(data)
print(duplicatecolumns)
#removing Duplicate columns
data_unique <-data[, !duplicatecolumns]
#updating dataset after removing duplicate column
data <- data_unique
print(data)
#Standardizing data to be of the same data type
numerical_cols <- sapply(data, is.numeric)
#setting all data to zero decimal places
data[numerical_cols] <- lapply(data[numerical_cols], function(x) {
round(x, 1)
})
print(data)
#Identifying and correcting errors like typos
# Identify columns with non-numerical values
non_numerical_cols <- sapply(data, function(x) !is.numeric(x))
print(names(data)[non_numerical_cols])
#Replacing all non-numeral to zero
data_cleaned <- data %>%
mutate(across(-1, ~ ifelse(is.na(as.numeric(as.character(.))), 0,
as.numeric(as.character(.)))))
data <-data_cleaned
print(data)
#Standardizing data to be of the same data type
numerical_cols <- sapply(data, is.numeric)
#setting all data to zero decimal places
data[numerical_cols] <- lapply(data[numerical_cols], function(x) {
round(x, 0)
})
print(data)
#importing additional data
data1 <- read_excel("malawicongo.xlsx")
print(data1)
#decimal places to zero
numerical_cols1 <-sapply(data1, is.numeric)
data1[numerical_cols1] <-lapply(data1[numerical_cols1], function(x){
round(x,0)
})
print(data1)
#Full Outer join of two datasets
data3<-merge(data, data1 by = "Product", all = TRUE)
#Full Outer join of two datasets
data3<-merge(data, data1, by = "Product", all = TRUE)
print(data3)
theme_set(new=theme_black())
head(data3)
str(data3)
glimpse(data3)
View(data3)
summarise(data3)
summary(data3)
summary(data3)
data3 %>% count(UG)
data3 %>%ggplot(aes(x=UG)) + geom_histogram()
install.packages("ggplot2")
data3 %>%ggplot(aes(x=UG)) + geom_histogram()
library(ggrepel)
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages("ggrepel")
library(ggrepel)
data3 %>%ggplot(aes(x=UG)) + geom_histogram()
head(data3)
data3 %>%ggplot(aes(x=Axe)) + geom_histogram()
data3 %>%ggplot(aes(x=Product, y=UG)) + geom_boxplot()
data3 %>%ggplot(aes(x=Product, y=UG)) + geom_boxplot() + geom_jitter()
library(ggrepel)
library(ggplot2)
print(missingvalues)
missing_values <-colSums(is.na(data))
print(missing_values)
head(data3)
glimpse(data3)
str(data3)
glimpse(data3)
summary(data3)
View(data3)
num_cols <- sapply(data_clean, is.numeric)
num_cols <- sapply(data3, is.numeric)
data_num <- data3[, num_cols]
for (col in names(data_num)) {
print(ggplot(data_clean, aes_string(col)) + geom_histogram(binwidth = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram of", col)) +
theme_minimal())
}
num_cols <- sapply(data3, is.numeric)
data_num <- data3[, num_cols]
for (col in names(data_num)) {
print(ggplot(data3, aes_string(col)) + geom_histogram(binwidth = 30, fill = "blue", color = "black") +
ggtitle(paste("Histogram of", col)) +
theme_minimal())
}
for (col in names(data_num)) {
print(ggplot(data3, aes_string(x = col)) + geom_boxplot(fill = "blue", color = "black") +
ggtitle(paste("Boxplot of", col)) +
theme_minimal())
}
data3 %>%ggplot(aes(x=Product, y=UG)) + geom_boxplot()
data_long <- melt(data3, id.vars = "Product", variable.name = "Country", value.name = "Value")
install.packages("reshape2")
data_long <- melt(data3, id.vars = "Product", variable.name = "Country", value.name = "Value")
library(reshape2)
data_long <- melt(data3, id.vars = "Product", variable.name = "Country", value.name = "Value")
head(data_long)
print(data_long)
ggplot(data_long, aes(x = Value)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Values Across All Countries",
x = "Value",
y = "Frequency") +
theme_minimal()
ggplot(data3, aes(x=Product, y=UG)) + geom_point(color = "blue")+
ggtitle("Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
ggplot(data3, aes(x=Product, y=UG)) +
geom_histogram(color = "blue")+
ggtitle("Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
ggplot(data3, aes(x=Product, y=UG)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black")+
ggtitle("Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
ggplot(data3, aes(x=Product, y=UG)) + geom_point(color = "blue")+
ggtitle("Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
ggplot(data3, aes(x=Product, y=UG)) + geom_line(color = "blue")+
ggtitle("Sales in Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
ggplot(data3, aes(x=Product, y=UG)) + geom_line(color = "blue")+
ggtitle("Sales in Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
theme_minimal()
ggplot(data3, aes(x=Product, y=UG)) + geom_point(color = "blue")+
ggtitle("Sales in Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
theme_minimal()
install.packages("tidyr")
library(tidyr)
library(tidyr)
head(data3)
x_col <- "Product"
y_cols <- c("UG","KY","RW","MW")
data_long <- data3 %>%
pivot_longer(cols=all_of(y_cols), names_to = "Variable", values_to = "Value")
head(data_long)
print(data_long)
ggplot(data3, aes(x=Product, y=UG)) + geom_point(color = "blue")+
ggtitle("Sales in Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
library(ggplot2)
library(ggrepel)
install.packages("ggplot2")
library(ggplot2)
ggplot(data3, aes(x=Product, y=UG)) + geom_point(color = "blue")+
ggtitle("Sales in Uganda") +
xlab("Products") +
ylab("Sales in Uganda")
theme_minimal()
ggplot(data3, aes(x=Product, y=UG)) + geom_point(color = "blue")+
ggtitle("Sales in Uganda") +
xlab("Products") +
ylab("Sales i Uganda")
theme_minimal()
ggplot(data3, aes(x=Product, y=KY)) + geom_point(color = "Red")+
ggtitle("Sales in Kenya") +
xlab("Products") +
ylab("Sales in Kenya")
theme_minimal()
data_with_sums <- data3 %>%
mutate(Sum = rowSums(select(., -1), na.rm = TRUE))
data_with_sums <- data3 %>% mutate(Sum = rowSums(select(., -1), na.rm = TRUE))
data_with_sums <- data3 %>% mutate(Sum = rowSums(select(., -1), na.rm = TRUE))
data3 %>% count(UG)
install.packages("readxl")
library(readxl)
install.packages("dplyr")
library(dplyr)
install.packages("skimr")
data3 %>% count(UG)
